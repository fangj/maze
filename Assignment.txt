CPS305 Assignment

No extensions will be given.  No late assignments are accepted.

This file may be copied only by a current CPS305 student, and only to 
her/his personal space for use in this course. It may never be placed in 
any public domain, nor in any place accessible by anyone other than the 
single CPS305 student who copied it.

Consult addendum.txt for changes to these requirements, as modifications
and clarifications may be made at any time and are part of this assignment.

Assignment is done in groups of 1, 2 or 3 people.
There is no marking penalty for working in a group.
A group member's grade is zero if any group member forgets to
include this person's name at submit time. 
------------------------------------------------------------------------

Platform:
--------
  gcc and Linux on the CS moons

Files:
------
  QueueImplementation.c           (given)
  QueueInterface.h                (given)
  UserTypes.h                     (you write) needed by Queue code
  Pathfinder.c                    (you write)
  cert.txt    (copy given file. Edit it correctly)
  member.txt  (copy given file. Edit correctly--will vary by member)


Submit Files:
------------
  Designate ONE PERSON in your group to be the submit-person.
  Note carefully what each person submits:

  member.txt     EACH and EVERY group member submits own (including submit person)
  cert.txt       ONLY SUBMIT PERSON submits this
  UserTypes.h    ONLY SUBMIT PERSON submits this
  Pathfinder.c   ONLY SUBMIT PERSON submits this

Submit Program:
--------------
  Submit one file at a time, using program submit-cps305dwoit, as in:
      submit-cps305dwoit member.txt
  You can check what files you have submitted using program:
      check-submit-cps305dwoit

Summary:
--------

Given: A matrix, M, supplied by the user.
       User's M has the following characteristics:
         -it must be at least a 2x2 matrix
         -it must be at most a 20x20 matrix
         -it need not be square
       Each cell of User's M contains one of the following characters:
         o  an occupied cell
         .  an unoccupied cell
         s  the start cell
         e  the end cell

Task:  Write a program named Pathfinder.c that prints a path through M starting 
       at cell s, and ending at cell e, in accordance with the Rule below. If 
       multiple such paths exist, any path is acceptable; if no such path exists, 
       print "NO PATHS"
       Pathfinder reads user's M from stdin, and must consider cell [0,0] to be 
       the upper-left-hand corner of M.

Rule:  From cell [i,j], the next cell in the path is cell X, where all 
       these conditions hold for X:
           -X is one of [i+1,j], or [i-1,j], or [i,j+1], or [i,j-1], 
	   -X is an unoccupied cell
           -X is NOT already on the path 
           -X is within the user's given M 

Output: Print the path, followed by the ASCII drawing of M, with the path 
       cells indicated by the "*" character. Your output must be like that 
       of "Example Run" near the end of this file.
      
Example:
       Suppose M contained the following 
       (note start cell is [4,6] and end cell is [8,1]):
oooooooooooo
o..........o
o.o.oooooo..
o.o....o...o
o.ooo.so.o.o
o...oooo.o.o
..o.o..o.o.o
o.o.o.oo.o.o
oeo........o
o...oooooo.o

       Then one path is:
       [4,6][3,6][3,5][3,4][3,3][2,3][1,3][1,2][1,1][2,1][3,1][4,1][5,1][6,1][7,1][8,1]

       This path can also be shown inside M using the '*' character:
       oooooooooooo
       o***.......o
       o*o*oooooo..
       o*o****o...o
       o*ooo.*o.o.o
       o*..oooo.o.o
       .*o.o..o.o.o
       o*o.o.oo.o.o
       o*o........o
       o...oooooo.o


Approach:
---------
Start at cell s, and explore along every path of unoccupied cells. 
If, during exploration, you encounter cell e, then a solution exists 
(because cell e is reachable from cell s using only unoccupied cells.) 
If you never encounter cell e, then no path exists from s to e.

General Algorithm (which your code must follow):
-----------------------------------------------
  Do this once at the beginning:
    -create an empty Container of cells to explore
    -add the start cell to the Container
  Do this each subsequent step:
    -Container empty? If yes, report "NO PATHS" and end program
    -Take a cell out of Container
    -Has this cell already been recorded? If yes, then we've already
     explored from this cell, so skip the rest of this step and
     continue with the next step.
    -Is this cell the end cell? If so, we've found a path, so
     print it and end program.
    -The cell is a not-previously-explored, non-end cell that is
     reachable from the start cell. Explore it as follows:
          -identify all appropriate adjacent cells in M
          -add these identified cells to the Container
    -Record that this cell has been explored (so it won't be explored
     again).

Input:
-----
User must input 2 integers on first line, giving M's row and column
count. On remaining lines, user inputs M, one row at a time.  e.g., 
for the example above, user input must be:

12 10
oooooooooooo
o..........o
o.o.oooooo..
o.o....o...o
o.ooo.so.o.o
o...oooo.o.o
..o.o..o.o.o
o.o.o.oo.o.o
oeo........o
o...oooooo.o

Container:
---------
  You MUST use a Queue as the Container, and you MUST use the
  implementation from you textbook, which is given in the following
  files. You may not alter these files.
  QueueImplementation.c and QueueInterface.h


Robustness and Assumptions:
--------------------------
 -Assume user provides correct input on stdin, and that the user's
  matrix is 20x20, maximum (but not necessarily square). 
 -Assume memory is always available (malloc calloc, etc)  
 -File addendum.txt will be updated periodically with additional 
  assignment assumptions and QA. Everything in addendum.txt must also 
  be considered part of this assignment.

Grading:
--------
 On a CS moon ONLY, we will compile and run your program.

 -The assignment mark IS zero for:
   -incorrectly named files (includes case!!), missing files
   -cert.txt missing or incorrectly filled-in
   -member.txt missing or incorrectly filled-in for ANY group member
   -code does not compile 
   -code compiles, but is not a good attempt at solving the problem
    (too simplistic, does not follow instructions, etc.)

 If not zero, then the mark includes, but is not limited to, the 
 following. Note that if the submission is incomplete, then the
 Style/Documentation/Modularity mark is also reduced accordingly.

 -Style and Documentation (15%)
    -simple, clear, readable code
    -function header comments
    -internal documentation only of complicated parts
    -indentation, formatting, use of whitespace (indent with either tabs
     or spaces, but not both mixed). Your code should look properly 
     formatted when displayed with moon "cat" command.
    -meaningful, consistent function and variable names

-Data Structures and Modularity  (25%)
       Creation and use of appropriate data structures and/or ADTs.
       Good use of helper functions.  If a task is repeated, use a helper 
       function, NOT (nearly) duplicate code.  If a function is too long, 
       consider dividing it into sub-functions, even if they are called 
       only once. Too long is about 30LOC. Divide even short chunks of
       code into functions to increase readability of your code.

 -Functionality (60%)
    -correctness (when following assignment instructions)
     Your program may produce required results, but will be worth little
     unless it does so by following assignment instructions/requirements.
    -correctness is measured ONLY by the grader's own tests. 


Example Run:
------------
Here is an example of running Pathfinder.c (compiled into a.out). 
Note that "dwoit> " is simply my prompt.

dwoit> cat yes1
12 10
oooooooooooo
o..........o
o.o.oooooo.o
o.o....o...o
o.ooo.so.o.o
o...oooo.o.o
o.o.o..o.o.o
o.o.o.oo.o.o
oeo......o.o
oooooooooooo
dwoit> ./a.out <yes1
A Path:
[4,6][3,6][3,5][3,4][3,3][2,3][1,3][1,2][1,1][2,1][3,1][4,1][5,1][6,1][7,1][8,1]
oooooooooooo
o..********o
o.o*oooooo*o
o.o***.o***o
o.ooo**o*o.o
o***oooo*o.o
o*o*o..o*o.o
o*o*o.oo*o.o
o*o******o.o
oooooooooooo
dwoit>

